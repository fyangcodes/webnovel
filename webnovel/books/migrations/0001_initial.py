# Generated by Django 5.2.2 on 2025-07-11 08:33

import books.fields
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('canonical_name', models.CharField(max_length=255)),
                ('localized_name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'ordering': ['canonical_name'],
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('code', models.CharField(max_length=10, unique=True)),
                ('name', models.CharField(max_length=50)),
                ('local_name', models.CharField(max_length=50)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255)),
                ('slug', models.CharField(blank=True, max_length=255, unique=True, validators=[django.core.validators.RegexValidator(code='invalid_slug', message='Slug can contain any characters except whitespace and /\\?%*:|"<>', regex='^[^\\s/\\\\?%*:|"<>]+$')])),
                ('isbn', models.CharField(blank=True, max_length=20, null=True)),
                ('description', models.TextField(blank=True)),
                ('cover_image', models.ImageField(blank=True, null=True, upload_to='book_cover_upload_to')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('archived', 'Archived'), ('private', 'Private'), ('completed', 'Completed'), ('on_hold', 'On Hold')], default='draft', help_text='Book status (e.g., draft, published, etc.)', max_length=20)),
                ('total_chapters', models.PositiveIntegerField(default=0)),
                ('estimated_words', models.PositiveIntegerField(default=0)),
                ('total_words', models.PositiveIntegerField(default=0)),
                ('total_characters', models.PositiveIntegerField(default=0)),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='books.author')),
                ('original_book', models.ForeignKey(blank=True, help_text='Link to the original book if this is a translation.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='translations', to='books.book')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='books', to=settings.AUTH_USER_MODEL)),
                ('language', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='books.language')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Chapter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('content', models.TextField()),
                ('content_file_path', models.CharField(blank=True, help_text='Path to JSON content file', max_length=255)),
                ('paragraph_style', models.CharField(choices=[('single_newline', 'Single Newline'), ('double_newline', 'Double Newline'), ('auto_detect', 'Auto Detect')], default='auto_detect', help_text='How to parse paragraphs from content', max_length=20)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('translating', 'Translating'), ('scheduled', 'Scheduled'), ('published', 'Published'), ('archived', 'Archived'), ('private', 'Private'), ('error', 'Error')], default='draft', help_text='Chapter status', max_length=20)),
                ('active_at', models.DateTimeField(blank=True, help_text='When this chapter should become active/published', null=True)),
                ('abstract', models.TextField(blank=True, help_text='AI-generated summary for translation context')),
                ('key_terms', models.JSONField(blank=True, default=list, help_text='Important terms for consistent translation')),
                ('title', models.CharField(max_length=255)),
                ('slug', models.CharField(blank=True, max_length=255, validators=[django.core.validators.RegexValidator(code='invalid_slug', message='Slug can contain any characters except whitespace and /\\?%*:|"<>', regex='^[^\\s/\\\\?%*:|"<>]+$')])),
                ('chapter_number', books.fields.AutoIncrementingPositiveIntegerField(blank=True, null=True)),
                ('excerpt', models.TextField(blank=True, max_length=1000)),
                ('word_count', models.PositiveIntegerField(default=0)),
                ('char_count', models.PositiveIntegerField(default=0)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chapters', to='books.book')),
                ('original_chapter', models.ForeignKey(blank=True, help_text='Original chapter if this is a translation', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='translations', to='books.chapter')),
                ('language', models.ForeignKey(blank=True, help_text='Language of this chapter (inherits from book if not specified)', null=True, on_delete=django.db.models.deletion.SET_NULL, to='books.language')),
            ],
            options={
                'ordering': ['chapter_number'],
            },
        ),
        migrations.AddField(
            model_name='author',
            name='language',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='books.language'),
        ),
        migrations.CreateModel(
            name='BookFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('file', models.FileField(upload_to='book_file_upload_to', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'txt', 'docx', 'epub'])])),
                ('description', models.CharField(blank=True, max_length=255)),
                ('file_size', models.PositiveIntegerField(default=0)),
                ('file_hash', models.CharField(blank=True, max_length=64)),
                ('file_type', models.CharField(blank=True, max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('chunking', 'Chunking'), ('translating', 'Translating'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', help_text='Processing status of the file', max_length=20)),
                ('processing_progress', models.PositiveIntegerField(default=0)),
                ('error_message', models.TextField(blank=True)),
                ('processing_started_at', models.DateTimeField(blank=True, null=True)),
                ('processing_completed_at', models.DateTimeField(blank=True, null=True)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to='books.book')),
                ('owner', models.ForeignKey(blank=True, help_text='User who uploaded this file.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='uploaded_bookfiles', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [models.Index(fields=['book', 'status'], name='books_bookf_book_id_80578a_idx'), models.Index(fields=['status', 'processing_progress'], name='books_bookf_status_68d473_idx')],
            },
        ),
        migrations.CreateModel(
            name='ChangeLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('original_object_id', models.PositiveIntegerField()),
                ('changed_object_id', models.PositiveIntegerField()),
                ('change_type', models.CharField(choices=[('translation', 'Translation'), ('edit', 'Edit/Correction'), ('other', 'Other')], default='edit', max_length=20)),
                ('status', models.CharField(default='completed', max_length=50)),
                ('notes', models.TextField(blank=True)),
                ('version', books.fields.AutoIncrementingPositiveIntegerField(blank=True, null=True)),
                ('diff', models.TextField(blank=True, help_text='Optional: store a diff of the change')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(blank=True, help_text='User who made the change (translator, editor, etc.)', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [models.Index(fields=['content_type', 'original_object_id'], name='books_chang_content_1d06b2_idx'), models.Index(fields=['content_type', 'changed_object_id'], name='books_chang_content_8f67c2_idx'), models.Index(fields=['user', 'change_type'], name='books_chang_user_id_71d26f_idx'), models.Index(fields=['created_at'], name='books_chang_created_2980be_idx')],
            },
        ),
        migrations.CreateModel(
            name='ChapterMedia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('media_type', models.CharField(choices=[('image', 'Image'), ('audio', 'Audio'), ('video', 'Video'), ('document', 'Document'), ('other', 'Other')], default='image', help_text='Type of media content', max_length=20)),
                ('file', models.FileField(upload_to='chapter_media_upload_to', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png', 'gif', 'webp', 'svg', 'bmp', 'mp3', 'wav', 'ogg', 'm4a', 'flac', 'aac', 'mp4', 'avi', 'mov', 'wmv', 'flv', 'webm', 'mkv', 'pdf', 'doc', 'docx', 'txt', 'rtf', 'odt'])])),
                ('title', models.CharField(blank=True, help_text='Title or name of the media', max_length=255)),
                ('caption', models.TextField(blank=True, help_text='Description or caption')),
                ('alt_text', models.CharField(blank=True, help_text='Accessibility text', max_length=255)),
                ('position', models.PositiveIntegerField(help_text='Position relative to text paragraphs (e.g., 1 = before first paragraph)')),
                ('duration', models.PositiveIntegerField(blank=True, help_text='Duration in seconds (for audio/video)', null=True)),
                ('file_size', models.PositiveIntegerField(default=0, help_text='File size in bytes')),
                ('mime_type', models.CharField(blank=True, help_text='MIME type of the file', max_length=100)),
                ('is_processed', models.BooleanField(default=False, help_text='Whether media has been processed')),
                ('processing_error', models.TextField(blank=True, help_text='Error message if processing failed')),
                ('thumbnail', models.ImageField(blank=True, help_text='Thumbnail image for video/audio content', null=True, upload_to='books/book_thumbnails/')),
                ('chapter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='media', to='books.chapter')),
            ],
            options={
                'ordering': ['position'],
                'indexes': [models.Index(fields=['chapter', 'media_type'], name='books_chapt_chapter_6b4a2f_idx'), models.Index(fields=['media_type', 'is_processed'], name='books_chapt_media_t_c80862_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='chapter',
            index=models.Index(fields=['book', 'chapter_number'], name='books_chapt_book_id_de56cf_idx'),
        ),
        migrations.AddIndex(
            model_name='chapter',
            index=models.Index(fields=['book', 'status'], name='books_chapt_book_id_8e54c4_idx'),
        ),
        migrations.AddIndex(
            model_name='chapter',
            index=models.Index(fields=['language', 'status'], name='books_chapt_languag_9a8802_idx'),
        ),
        migrations.AddIndex(
            model_name='chapter',
            index=models.Index(fields=['active_at', 'status'], name='books_chapt_active__9ffada_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='chapter',
            unique_together={('book', 'chapter_number')},
        ),
        migrations.AddIndex(
            model_name='book',
            index=models.Index(fields=['owner', 'status'], name='books_book_owner_i_3f6702_idx'),
        ),
        migrations.AddIndex(
            model_name='book',
            index=models.Index(fields=['created_at'], name='books_book_created_572b47_idx'),
        ),
        migrations.AddIndex(
            model_name='book',
            index=models.Index(fields=['language', 'status'], name='books_book_languag_2c24ff_idx'),
        ),
        migrations.AddIndex(
            model_name='book',
            index=models.Index(fields=['author', 'status'], name='books_book_author__6f8956_idx'),
        ),
        migrations.AddIndex(
            model_name='author',
            index=models.Index(fields=['canonical_name'], name='books_autho_canonic_c14ee0_idx'),
        ),
        migrations.AddIndex(
            model_name='author',
            index=models.Index(fields=['language'], name='books_autho_languag_52874d_idx'),
        ),
    ]
